---
version: 0.2

branches:
  default:
    stage: pre-merge
models:
  - env: &global_env
      CI: 'true'
      CIRCLE_ARTIFACTS: '/tmp'
      CIRCLE_NODE_TOTAL: "4"
      CIRCLE_TEST_REPORTS: '/tmp'
      CI_REPORTS: '/tmp'
      ENABLE_LOCAL_CACHE: "1"
      REPORT_TOKEN: 'report-token-1'
      REMOTE_MANAGEMENT_DISABLE: '1'
  - Git: &clone
      name: Pull repo
      repourl: '%(prop:git_reference)s'
      shallow: True
      retryFetch: True
      haltOnFailure: True
      # Machine Setup
  - ShellCommand: &update_hosts
      name: Update hosts
      command: sudo bash -c "echo '
               127.0.0.1     \
               bucketwebsitetester.s3-website-us-east-1.amazonaws.com
               ' >> /etc/hosts"
      haltOnFailure: True
  - ShellCommandWthSecrets: &aws-credentials
      name: Setup AWS Credentials
      command: bash eve/workers/build/aws.bash
      haltOnFailure: True
  - ShellCommandWithSecrets: &npm-install
      name: install modules
      command: npm install
      haltOnFailure: True
stages:
  pre-merge:
    worker: &master-worker
      type: docker
      path: eve/workers/build
      volumes: &default_volumes
        - '/home/eve/workspace'
    steps:
#      - Git: *clone
#      - ShellCommandWithSecrets: *npm-install
#      - ShellCommandWithSecrets:
#          name: Linting
#          command: |
#            npm run --silent lint -- --max-warnings 0
#            npm run --silent lint_md
#            flake8 $(git ls-files "*.py")
#            yamllint $(git ls-files "*.yml")
#      - ShellCommandWithSecrets:
#          name: Unit Coverage
#          command: |
#            mkdir -p $CIRCLE_TEST_REPORTS/unit
#            npm run unit_coverage
#            npm run unit_coverage_legacy_location
#          env: *global_env
#          haltOnFailure: True
      - TriggerStages:
          name: Launch all nodes simultaneously
          stage_names:
            - external-backend-with-proxy
#            - node0
#            - node1
#            - node2
#            - node3
          waitForFinish: True
          haltOnFailure: True
  external-backend-with-proxy:
    worker:
      type: kube_pod
      path: eve/workers/pod.yaml
      images:
        aggressor: eve/workers/build
        squid: eve/workers/squid
        s3: "."
      vars: &proxy-vars
        S3BACKEND: "mem"
        MPU_TESTING: "yes"
        S3DATA: "multiple"
        CI_PROXY: "true"
    steps:
      - Git: *clone
      - ShellCommand: *npm-install
      - ShellCommandWithSecrets: *aws-credentials
      - ShellCommandWithSecrets:
          command: |
            source ./eve/workers/build/bash_profile &> /dev/null
            bash wait_for_local_port.bash 8000 40
            npm run ft_awssdk_external_backends
          env:
            <<: *global_env
            <<: *proxy-vars
  node0:
    worker: *master-worker
    steps:
      - Git: *clone
      - ShellCommand: *update_hosts
      - ShellCommand:
          command: rm -rf node_modules
      - ShellCommandWithSecrets: *aws-credentials
      - ShellCommandWithSecrets: *npm-install
      - ShellCommandWithSecrets:
          command: bash -l tests.bash
          env:
            <<: *global_env
            CIRCLE_NODE_INDEX: '0'
      - ShellCommandWithSecrets:
          command: ls -la && cat /tmp/*.txt
          env:
            <<: *global_env
          haltOnFailure: True
          timeout: 300
  node1:
    worker: *master-worker
    steps:
      - Git: *clone
      - ShellCommand: *update_hosts
      - ShellCommand:
          command: rm -rf node_modules
      - ShellCommandWithSecrets: *aws-credentials
      - ShellCommandWithSecrets: *npm-install
      - ShellCommandWithSecrets:
          command: bash -l tests.bash
          env:
            <<: *global_env
            CIRCLE_NODE_INDEX: '1'
      - ShellCommandWithSecrets:
          command: ls -la && cat /tmp/*.txt
          env:
            <<: *global_env
          haltOnFailure: True
          timeout: 300
  node2:
    worker: *master-worker
    steps:
      - Git: *clone
      - ShellCommand: *update_hosts
      - ShellCommand:
          command: rm -rf node_modules
      - ShellCommandWithSecrets: *aws-credentials
      - ShellCommandWithSecrets: *npm-install
      - ShellCommandWithSecrets:
          command: bash -l tests.bash
          env:
            <<: *global_env
            CIRCLE_NODE_INDEX: '2'
      - ShellCommandWithSecrets:
          command: ls -la && cat /tmp/*.txt
          env:
            <<: *global_env
          haltOnFailure: True
          timeout: 300
  node3:
    worker: *master-worker
    steps:
      - Git: *clone
      - ShellCommand: *update_hosts
      - ShellCommand:
          command: rm -rf node_modules
      - ShellCommandWithSecrets: *aws-credentials
      - ShellCommandWithSecrets: *npm-install
      - ShellCommandWithSecrets:
          command: bash -l tests.bash
          env:
            <<: *global_env
            CIRCLE_NODE_INDEX: '3'
      - ShellCommandWithSecrets:
          command: ls -la && cat /tmp/*.txt
          env:
            <<: *global_env
          haltOnFailure: True
          timeout: 300
