---
version: 0.2

branches:
  feature/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*:
    stage: pre-merge
  development/*:
    stage: post-merge

models:
  - env: &global-env
  - env: &mongo-vars
      S3BACKEND: "mem"
      MPU_TESTING: "yes"
      S3METADATA: mongodb
  - env: &file-mem-mpu
      S3BACKEND: "file"
      S3VAULT: "mem"
      MPU_TESTING: "yes"
  - Git: &clone
      name: Pull repo
      repourl: '%(prop:git_reference)s'
      shallow: True
      retryFetch: True
      haltOnFailure: True
  - ShellCommand: &credentials
      name: Setup Credentials
      command: bash eve/workers/build/credentials.bash
      haltOnFailure: True
      env: *global-env
  - ShellCommand: &npm-install
      name: install modules
      command: npm install
      haltOnFailure: True
  - Upload: &upload-artifacts
      source: /artifacts
      urls:
        - "*"
  - ShellCommand: &follow-s3-log
      logfiles:
        s3:
          filename: /artifacts/s3.log
          follow: true

stages:
  pre-merge:
    worker:
      type: local
    steps:
      - SetProperty:
          property: artifacts_name
          value: "scality-s3-%(prop:buildnumber)s"
          haltOnFailure: True

      - TriggerStages:
          name: Launch all workers
          stage_names:
            - linting-coverage
            - file-ft-tests
            - mongo-ft-tests
          waitForFinish: True
          haltOnFailure: True

  linting-coverage:
    worker:
      type: docker
      path: eve/workers/build
      volumes: &default_volumes
        - '/home/eve/workspace'
    steps:
      - Git: *clone
      - ShellCommand: *npm-install
      - ShellCommand: *credentials
      - ShellCommand:
          name: Linting
          command: |
            set -ex
            npm run --silent lint -- --max-warnings 0
            npm run --silent lint_md
            flake8 $(git ls-files "*.py")
            yamllint $(git ls-files "*.yml")
      - ShellCommand:
          name: Unit Coverage
          command: |
            set -ex
            mkdir -p $CIRCLE_TEST_REPORTS/unit
            npm run unit_coverage
            npm run unit_coverage_legacy_location
          env: &shared-vars
            <<: *global-env
            S3_LOCATION_FILE: tests/locationConfig/locationConfigTests.json
            CIRCLE_TEST_REPORTS: /tmp
            CIRCLE_ARTIFACTS: /tmp
            CI_REPORTS: /tmp
      - ShellCommand:
          name: Unit Coverage logs
          command: find /tmp/unit -exec cat {} \;

  mongo-ft-tests:
    worker: &s3-pod
      type: kube_pod
      path: eve/workers/pod.yaml
      images:
        aggressor: eve/workers/build
        s3: "."
      vars:
        aggressorMemLimit: "2Gi"
        s3MemLimit: "1664Mi"
        redis: enabled
        env:
          <<: *mongo-vars
          <<: *global-env
    steps:
      - Git: *clone
      - ShellCommand: *credentials
      - ShellCommand: *npm-install
      - ShellCommand:
          command: |
            set -ex
            bash wait_for_local_port.bash 8000 40
            npm run ft_test
          <<: *follow-s3-log
          env:
            <<: *mongo-vars
            <<: *global-env
      - Upload: *upload-artifacts

  file-ft-tests:
    worker:
      type: kube_pod
      path: eve/workers/pod.yaml
      images:
        aggressor: eve/workers/build
        s3: "."
      vars:
        aggressorMemLimit: "1920Mi"
        s3MemLimit: "2Gi"
        redis: enabled
        env:
          <<: *file-mem-mpu
          <<: *global-env
    steps:
      - Git: *clone
      - ShellCommand: *credentials
      - ShellCommand: *npm-install
      - ShellCommand:
          command: |
            set -ex
            bash wait_for_local_port.bash 8000 40
            npm run ft_test
          <<: *follow-s3-log
          env:
            <<: *file-mem-mpu
            <<: *global-env
      - Upload: *upload-artifacts

  post-merge:
    worker:
      type: local
    steps:
      - Git: *clone
      - ShellCommand: &docker_login
          name: Private Registry Login
          command: >
            docker login
            -u '%(secret:private_registry_username)s'
            -p '%(secret:private_registry_password)s'
            '%(secret:private_registry_url)s'
      - ShellCommand:
          name: Dockerhub Login
          command: >
            docker login
            -u '%(secret:dockerhub_ro_user)s'
            -p '%(secret:dockerhub_ro_password)s'
      - SetProperty: &docker_image_name
          name: Set docker image name property
          property: docker_image_name
          value:
            "%(secret:private_registry_url)s/zenko/cloudserver:\
            %(prop:commit_short_revision)s"
      - ShellCommand:
          name: Build docker image
          command: >-
            docker build
            -t %(prop:docker_image_name)s
            -t zenko/cloudserver:latest-%(prop:product_version)s
            .
      - ShellCommand:
          name: Push image
          command: |
            docker push %(prop:docker_image_name)s
            docker push zenko/cloudserver:latest-%(prop:product_version)s
